package main

import (
	"log"
	"runtime"
)

var a string
var done bool

func setup() {
	// a = "hello, world" // с таким расположением все ок
	done = true
	a = "hello, world" // 1. а вот если в таком порядке

	// компилятор, в рамках одного потока M (это важно)
	// может соптимизировать инструкции и поставить
	// первым done = true, даже если сначала шло a = "hello, world"

	// еще и процессор может переупорядочить операции:
	// и M и процессор делают это если по их разумению
	// это не нарушает логический порядок
	// (например операция не зависит от предудщей)

	// запретить такое переупорядочивание можно барьерами
	// в го нет возможности явно вызвать инструкцию барьера
	// но есть "логические" операции барьера:
	// LoadLoad - все операции чтения до этого барьера будут выполнены
	//            до операций чтения после
	// LoadStore - все операции чтения до этого барьера будут выполнены
	//	           до операций записи после
	// StoreStore - все операции записи до этого барьера будут выполнены
	//              до операций записи после
	// StoreLoad - все операции записи до этого барьера будут выполнены
	//             до операций чтения после

	// + есть Полный барьер StoreStore + LoadLoad
	// но эти 4 операции: 2 чтения и 2 записи могут переупорядочиться
	// до барьера

	// + есть барьер acquire LoadLoad + LoadStore
	// при нем все операции до барьера могут попасть куда то после него
	// но операции после барьера не попадут куда то до барьера

	// + есть барьер release StoreStore + LoadStore
	// при нем все операции после барьера могут попасть куда то до барьера,
	// но операции до него не могут попасть куда то после него

	// acquire и release очень похожи на mutex
	// под капотом mutex'а как раз таки acquire и release барьер

	// барьеры ТОЛЬКО отменяются оптимизацию ПОРЯДКА выполнения операций
	// на какую-то другую оптимизацию они никак не влиют

	if done {
		log.Println(len(a)) // always 12 once printed
	}
}

func main() {
	// go run -race main.go // WARNING: DATA RACE

	go setup()

	for !done {
		runtime.Gosched() // 2. вот тут прервется main до присвоения a
	}

	log.Println(a) // expected to print: hello, world
	// 3. а вот тут выведется пустая строка потому что не успела присводиться
}

// у меня воспроизводилось что выводится hello, world, но не успевал вывестись len(a)

// Lesson #7 video, time: 01:00:00
